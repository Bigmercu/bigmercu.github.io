<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空气稀薄1</title>
  
  <subtitle>没有一只家雀掉下来的时候上帝不知道1。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lswks.github.io/"/>
  <updated>2018-01-07T13:33:15.000Z</updated>
  <id>http://lswks.github.io/</id>
  
  <author>
    <name>家雀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello Again</title>
    <link href="http://lswks.github.io/2017/10/29/Hello-Again/"/>
    <id>http://lswks.github.io/2017/10/29/Hello-Again/</id>
    <published>2017-10-29T11:17:48.000Z</published>
    <updated>2018-01-07T13:33:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hey"><a href="#Hey" class="headerlink" title="Hey"></a>Hey</h1><p>还有很多事没做完<br>我不能就这样放下。<br>还是应该重新回到正轨，噢不，应该挣脱这一切！</p><p>20171029 7:29</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hey&quot;&gt;&lt;a href=&quot;#Hey&quot; class=&quot;headerlink&quot; title=&quot;Hey&quot;&gt;&lt;/a&gt;Hey&lt;/h1&gt;&lt;p&gt;还有很多事没做完&lt;br&gt;我不能就这样放下。&lt;br&gt;还是应该重新回到正轨，噢不，应该挣脱这一切！&lt;/p&gt;
&lt;p&gt;20171029 7:
      
    
    </summary>
    
    
      <category term="0ther" scheme="http://lswks.github.io/tags/0ther/"/>
    
  </entry>
  
  <entry>
    <title>java学习 之一</title>
    <link href="http://lswks.github.io/2016/07/18/java%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://lswks.github.io/2016/07/18/java学习-1/</id>
    <published>2016-07-18T06:22:24.000Z</published>
    <updated>2018-07-08T17:11:40.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="一个单词"><a href="#一个单词" class="headerlink" title="一个单词"></a>一个单词</h1><blockquote><p>synchronized<br> 美  [‘sɪŋkrənaɪzd]<br> adj. 同步的；同步化的<br> v. 使协调（synchronize的过去分词）；同时发生；校准</p></blockquote><p><em>看到这个单词就是泪,上次面试问到Java线程同步的问题,我说我一般使用RxBus…然后HR说:”我指的是最底层的实现”,我其实知道这个单词(认识),但是不会读,实在想不起来,就问HR有没有什么提示,HR就说”有关键字,synchronize”,我还是想不起来,不是因为我不知道啊,是因为我实在不认识这个单词,后来他提到同步锁我才想起来,赶紧挽回.最后还是被挂了,我的处女面</em></p><!--more--><h1 id="两个方法"><a href="#两个方法" class="headerlink" title="两个方法"></a>两个方法</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h2><blockquote><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CUP的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会;<br>　　 sleep()是Thread类的Static(静态)的方法；因此他不能改变对象的机锁，所以当在一个Synchronized块中调用Sleep()方法是，线程虽然休眠了，但是对象的机锁并木有被释放，其他线程无法访问这个对象（即使睡着也持有对象锁）。<br>　　在sleep()休眠时间期满后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级。</p></blockquote><p><strong>所以说,sleep不会释放线程锁,它打盹也要持有对象锁.</strong></p><h2 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h2><blockquote><p>wait()方法是Object类里的方法；当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁）；其他线程可以访问；<br>　　wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。<br>　　wiat()必须放在synchronized block中，否则会在program runtime时扔出”java.lang.IllegalMonitorStateException“异常。</p></blockquote><p><strong>所以说,wait以后会释放对象锁,其他线程可以访问该对象.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Bigmercu on 16/7/18.</span></span><br><span class="line"><span class="comment"> * Email:bigmercu@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在主线程中调用普通方法,普通方法会被先执行.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line"><span class="comment">//            Thread.sleep(2000);</span></span><br><span class="line">        wait(<span class="number">2000</span>);</span><br><span class="line">        num *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    firstMethod();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Main main = <span class="keyword">new</span> Main();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(main);</span><br><span class="line">    thread.start();</span><br><span class="line">    main.secondMethod();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出分析"><a href="#输出分析" class="headerlink" title="输出分析"></a>输出分析</h3><p>情况一:使用 Thread.sleep(2000);<br>在暂停两秒以后输出 1010<br>说明先调用了secondMethod方法,执行该方法并没有释放线程锁</p><p>情况二:使用 wait(2000);<br>直接输出 110<br>还是先调用了secondMethod方法,但是该方法不再持有线程锁,执行了run方法,然后执行了firstMethod方法输出了num未被改变以前的值</p><p>结论:sleep在休眠时持有线程锁,但是wait不会.</p><h2 id="notify"><a href="#notify" class="headerlink" title="notify()"></a>notify()</h2><p>wait以后线程会进入线程池等待,当满足运行条件以后可以调用<code>notify</code>来唤醒线程.当有多线程等待可以调用<code>notifyAlll()</code>来唤醒所有线程.</p><blockquote><p>因为wait()方法是通知当前线程等待并释放对象锁，notify()方法是通知等待此对象锁的线程重新获得对象锁，然而，如果没有获得对象锁，wait方法和notify方法都是没有意义的，即必须先获得对象锁，才能对对象锁进行操作，于是，才必须把notify和wait方法写到synchronized方法或是synchronized代码块中了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> aBoolean = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">firstMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    secondMethod();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">if</span>(!aBoolean)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        num -=<span class="number">5</span>;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;"</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在这个方法中使num增加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">secondMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">        <span class="keyword">while</span>(num &lt; <span class="number">20000</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.wait(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">if</span>(num &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">                <span class="comment">//当达到我们要求时通知线程</span></span><br><span class="line">                <span class="keyword">this</span>.notify();</span><br><span class="line">                aBoolean = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num += <span class="number">3000</span>;</span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt;A"</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        firstMethod();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Main main = <span class="keyword">new</span> Main();</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(main);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果不notify"><a href="#如果不notify" class="headerlink" title="如果不notify"></a>如果不notify</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A3110</span><br><span class="line">A6110</span><br><span class="line">A9110</span><br><span class="line">A12110</span><br><span class="line">A15110</span><br><span class="line">A18110</span><br><span class="line">A21110</span><br></pre></td></tr></table></figure><h3 id="notify-1"><a href="#notify-1" class="headerlink" title="notify"></a>notify</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A3110</span><br><span class="line">A6110</span><br><span class="line">A9110</span><br><span class="line">A12110</span><br><span class="line">A15110</span><br><span class="line">15105</span><br><span class="line">A18105</span><br><span class="line">A21105</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;一个单词&quot;&gt;&lt;a href=&quot;#一个单词&quot; class=&quot;headerlink&quot; title=&quot;一个单词&quot;&gt;&lt;/a&gt;一个单词&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;synchronized&lt;br&gt; 美  [‘sɪŋkrəna
      
    
    </summary>
    
      <category term="Java" scheme="http://lswks.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://lswks.github.io/tags/Java/"/>
    
      <category term="Java 基础" scheme="http://lswks.github.io/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello Word</title>
    <link href="http://lswks.github.io/2016/06/01/Hello-Word/"/>
    <id>http://lswks.github.io/2016/06/01/Hello-Word/</id>
    <published>2016-06-01T05:21:04.000Z</published>
    <updated>2018-07-09T03:08:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>  以后就搬家到这了,因为wordpress太坑爹了,速度超级慢.</p><pre><code>Lswks2016年六一儿童节</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  以后就搬家到这了,因为wordpress太坑爹了,速度超级慢.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Lswks
2016年六一儿童节&lt;/code&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="OOC" scheme="http://lswks.github.io/categories/OOC/"/>
    
    
      <category term="OOC" scheme="http://lswks.github.io/tags/OOC/"/>
    
  </entry>
  
</feed>
